<?php

	/**
	 *
	**/

	header("Content-Type: text/html; charset=UTF-8");
	ini_set("display_errors", "On");
	error_reporting(E_ALL | E_STRICT);
	ini_set('display_startup_errors', 1);
	header("Content-Type: text/html; charset=UTF-8");
	date_default_timezone_set("America/Argentina/Tucuman");
	setlocale(LC_ALL, "es-AR");
	
	require_once("cfg/config_instalador.php"); // Esta tiene que ir completa

	// Nuevas funciones
	
	/**
	 *	Descripcion:
	 * 	Salida:
	 * 	Notas:
	**/
	function indexar_datos ($ruta) {		
		$fp = fopen(DIR_TMP.'lock.txt', 'r+');
  		//Evitar ejecucion multiple
  		if(flock($fp, LOCK_EX)) {	
  			$archivos_nuevos = array();		
  			$archivos_nuevos = encontrar_archivos_nuevos ($ruta);	
  			//var_dump($archivos_nuevos);
			if (count($archivos_nuevos) > 0) {
				$id_archivos = indexar_archivo($archivos_nuevos);
				indexar_datos_crudos_csv($id_archivos, $archivos_nuevos);
				//cursor();
				cargar_datos_tablas();
				cargar_fotos();
			}
	    	flock($fp, LOCK_UN);
	  	} 
	  	else {
	    	echo "Fallo al intentar obtener el archivo lock";
	  	}

		fclose($fp);
		  
		echo "indexar datos";
	}

	function tiempo_de_ejecucion() {
		$tiempo_de_ejecucion = microtime(true) - $_SERVER["REQUEST_TIME_FLOAT"];
		echo "Tiempo de actualización: ".number_format($tiempo_de_ejecucion,3,',','')."seg."; 	
	}


	/**
	 * 	Descripcion: 
	 * 		Busca e indexa los archivos de una ruta dada, que no esten en la base de datos.
	 *
	 *	Algoritmo:
	 * 		Buscar archivo por nombre (path completo):
	 * 			Si lo encuentra:
	 * 				Comparar ultima modificacion:
	 *      			Si la ultima modificacion es diferente:
	 *      			 	Comparar hash:
	 *      			 		Si es diferente:	
	 *      			 			Se indexa.   				 	
	 *     Si no lo encuentra:
	 *     		Lo indexa. 	
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: 
	**/
	function encontrar_archivos_nuevos ($ruta) {		
		$bd = new BaseDeDatos("ccc");
		$dir = new Directorio();
		$rutas_archivos = array();
		$archivos_nuevos = array();

		$rutas_archivos = $dir->listar_archivos($ruta);
		//for($i=0; $i<984; $i++) {
		for($i=0; $i<count($rutas_archivos); $i++) {
			$filas_encontradas = $bd->num_rows("SELECT ruta_a_uhfapp FROM ccc.archivos_uhfapp WHERE ruta_a_uhfapp = '{$rutas_archivos[$i]}' LIMIT 1");

			if($filas_encontradas > 0) {
				$resultado = $bd->fetch_array("SELECT ultima_modificacion_a_uhfapp, hash_a_uhfapp FROM ccc.archivos_uhfapp WHERE ruta_a_uhfapp = '{$rutas_archivos[$i]}' LIMIT 1");
				$ultima_modificacion = $resultado["ultima_modificacion_a_uhfapp"];
				$hash = $resultado["hash_a_uhfapp"];

				if(filemtime($rutas_archivos[$i]) != $ultima_modificacion) {					
					if(hash_file('crc32' , $ruta[$i]) != $hash) {
						array_push($archivos_nuevos,$rutas_archivos[$i]);
					}
				}
			} else{
				array_push($archivos_nuevos,$rutas_archivos[$i]);
			}
		}
		$bd->cerrar_conexion();	

		//var_dump($archivos_nuevos);
		return $archivos_nuevos;
	}


	/**
	 * Retorna el indice.
	**/
	function indexar_archivo ($archivos) {		
		$bd = new BaseDeDatos("ccc");
		$id_archivos = array();

		$j=0;
		for($i=0; $i<count($archivos); $i++) {
			$nombre = basename($archivos[$i]);
			$extension = pathinfo($nombre, PATHINFO_EXTENSION);

			if(($extension=='csv') || ($extension=='kml') || ($extension=='jpg')) {
				$ultima_modificacion = filemtime($archivos[$i]);
				$hash = hash_file('crc32' , $archivos[$i]);

				$fp = fopen($archivos[$i], "rb");
				$tamanio = filesize($archivos[$i]);

				if($tamanio > 0)
					$contenido = fread($fp, $tamanio);
				
				$contenido = addslashes($contenido);
				//$contenido = gzcompress($contenido, 9);
				fclose($fp); 

				//extraer texto
				//SELECT CONVERT(UNCOMPRESS(contenido_a_uhfapp) USING utf8) FROM ccc.archivos_uhfapp;
				//extraer imagenes
				//SELECT UNCOMPRESS(contenido_a_uhfapp) FROM ccc.archivos_uhfapp where extension_a_uhfapp = "jpg";
				$bd->query("INSERT INTO ccc.archivos_uhfapp (nombre_a_uhfapp, 
															 ruta_a_uhfapp, 
															 extension_a_uhfapp, 
															 ultima_modificacion_a_uhfapp,
															 hash_a_uhfapp,
															 contenido_a_uhfapp) 
							VALUES ('$nombre',
									'$archivos[$i]',
									'$extension',
									'$ultima_modificacion',
									'$hash',
									COMPRESS('$contenido'))");

				$id_archivo = $bd->fetch_array("SELECT MAX(id_a_uhfapp) FROM ccc.archivos_uhfapp");

				$id_archivos[$i] = $id_archivo[0];
			}
		}
		$bd->cerrar_conexion();

		return $id_archivos;
	}


	/**
	 *	Descripcion: Indexa los datos dentro de archivo csv. Usa una tabla temporal. En uso.
	 * 	Salida:
	 * 	Notas:
	**/
	function indexar_datos_crudos_csv ($id_archivos, $archivos) {
		$bd = new BaseDeDatos("ccc");	

		$bd->query("SET AUTOCOMMIT=0");
		$bd->query("START TRANSACTION;");

		$bd->query("DROP TABLE IF EXISTS ccc.crudo_uhfapp_temp;");
		$bd->query("CREATE TABLE IF NOT EXISTS ccc.crudo_uhfapp_temp (		
						id_c_uhfapp_t INT(11) UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
						id_a_uhfapp INT(11) UNSIGNED NOT NULL,

						nombre_c_uhfapp_t VARCHAR(255),
						mac_c_uhfapp_t VARCHAR(255),

						n_abonado_c_uhfapp_t INT(11) UNSIGNED,

						lat_c_uhfapp_t FLOAT(10,6) NULL,
						lng_c_uhfapp_t FLOAT(10,6) NULL,
						gps_dcml_c_uhfapp_t POINT,
						gps_sexa_c_uhfapp_t VARCHAR(255),

						obs_c_uhfapp_t TEXT,
						
						fecha_c_uhfapp_t DATETIME,

						PRIMARY KEY(id_c_uhfapp_t),
						FOREIGN KEY (id_a_uhfapp) REFERENCES ccc.archivos_uhfapp (id_a_uhfapp) 
							ON DELETE CASCADE 
							ON UPDATE CASCADE
					) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_spanish_ci;");


			$bd->query("CREATE TABLE IF NOT EXISTS ccc.crudo_uhfapp_nuevos (
							id_c_uhfapp INT(11) UNSIGNED NOT NULL UNIQUE,
							id_a_uhfapp INT(11) UNSIGNED NOT NULL,

							nombre_c_uhfapp VARCHAR(255),
							mac_c_uhfapp VARCHAR(255),

							n_abonado_c_uhfapp INT(11) UNSIGNED,

							lat_c_uhfapp FLOAT(10,6) NULL,
							lng_c_uhfapp FLOAT(10,6) NULL,
							gps_dcml_c_uhfapp POINT,
							gps_sexa_c_uhfapp VARCHAR(255),

							obs_c_uhfapp TEXT,
							
							fecha_c_uhfapp DATETIME,

							PRIMARY KEY(id_c_uhfapp),
							FOREIGN KEY (id_a_uhfapp) REFERENCES ccc.archivos_uhfapp (id_a_uhfapp) 
								ON DELETE CASCADE 
								ON UPDATE CASCADE
						) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 DEFAULT COLLATE=utf8_spanish_ci;");


		for ($i=0; $i<count($archivos); $i++) {

				/*echo "a: ".$id_archivo[$i];
				echo "<br>";*/

				$extension = pathinfo($archivos[$i], PATHINFO_EXTENSION);				
				if($extension == 'csv') {
					$fecha = str_replace(".csv", "", $archivos[$i]);
					//echo $fecha;
					//echo "<br>";
					
					$fecha = pathinfo($archivos[$i]);
					$fecha = $fecha['filename'];
					$fecha = substr($fecha,-8);
					//echo $fecha;
					//echo "<br>";
					
					$año = substr($fecha,0,4);
					$mes = substr($fecha,4,2);
					$dia = substr($fecha,6,2);

					$fecha = "{$año}-{$mes}-{$dia}";
					//echo $fecha;
					//echo "<br>";		
										
					/////////////////
					// simplificar //
					////////////////////////////////////////
					// añadir foreing key de los archivos //
					// //////////////////////////////////////
					// prevenir ingresos de lat y long = 0 //
					// //////////////////////////////////////
					$bd->query("LOAD DATA LOCAL INFILE '$archivos[$i]'
								INTO TABLE ccc.crudo_uhfapp_temp
								FIELDS TERMINATED BY '\",'
								LINES TERMINATED BY '\\n'
									(@nombre, 
									@mac_celular, 
									@numero_abonado, 
									@coord_gps_dcml, 
									@coord_gps_sexa, 
									@observacion)
								SET							 
									nombre_c_uhfapp_t = SUBSTR(TRIM(@nombre), 2),
									mac_c_uhfapp_t = SUBSTR(TRIM(@mac_celular), 2),
									n_abonado_c_uhfapp_t = CAST(SUBSTR(TRIM(@numero_abonado), 2) AS UNSIGNED),

									gps_sexa_c_uhfapp_t = SUBSTR(TRIM(@coord_gps_sexa), 2),
									lat_c_uhfapp_t = CAST(SUBSTRING_INDEX(SUBSTR(TRIM(@coord_gps_dcml), 2), ',', 1) AS DECIMAL(10,6)),
									lng_c_uhfapp_t  = CAST(SUBSTRING_INDEX(SUBSTR(TRIM(@coord_gps_dcml), 2), ',', -1) AS DECIMAL(10,6)),					
									gps_dcml_c_uhfapp_t  = ST_GeomFromText(CONCAT('POINT(',REPLACE(SUBSTR(TRIM(@coord_gps_dcml), 2), ',',' '),')')),

									obs_c_uhfapp_t  = SUBSTR(TRIM(@observacion), 2),
									obs_c_uhfapp_t  = SUBSTRING(obs_c_uhfapp_t , 1, LENGTH(obs_c_uhfapp_t)-1),
									obs_c_uhfapp_t  = REPLACE(obs_c_uhfapp_t, '\'', '\\''),
									obs_c_uhfapp_t  = REPLACE(obs_c_uhfapp_t, '\"', 'º|@#'),
									obs_c_uhfapp_t  = REPLACE(obs_c_uhfapp_t, 'º|@#', '\"'),

									fecha_c_uhfapp_t = '$fecha',
									id_a_uhfapp='$id_archivos[$i]';");					
			}
		}

		//borra las filas con valores de lat o lng igual 0		
		$bd->query('DELETE FROM ccc.crudo_uhfapp_temp WHERE lat_c_uhfapp_t = 0 OR lng_c_uhfapp_t = 0');
		
		//inserta en la tabla crudo_uhfapp registros que tengan lat, lng y numero de abonados diferentes a los almacenados. Para evitar duplicados. 
		$bd->query("INSERT INTO ccc.crudo_uhfapp (	nombre_c_uhfapp,
													mac_c_uhfapp,
													n_abonado_c_uhfapp,
													lat_c_uhfapp,
													lng_c_uhfapp,
													gps_dcml_c_uhfapp,
													gps_sexa_c_uhfapp,
													obs_c_uhfapp,
													fecha_c_uhfapp,
													id_a_uhfapp )	  
					SELECT	nombre_c_uhfapp_t,
							mac_c_uhfapp_t,
							n_abonado_c_uhfapp_t,
							lat_c_uhfapp_t,
							lng_c_uhfapp_t,
							gps_dcml_c_uhfapp_t,
							gps_sexa_c_uhfapp_t,
							obs_c_uhfapp_t,
							fecha_c_uhfapp_t, 
							id_a_uhfapp
					FROM ccc.crudo_uhfapp_temp
					WHERE NOT EXISTS (	SELECT lat_c_uhfapp, lng_c_uhfapp, n_abonado_c_uhfapp 
										FROM ccc.crudo_uhfapp  
										WHERE ccc.crudo_uhfapp.lat_c_uhfapp = ccc.crudo_uhfapp_temp.lat_c_uhfapp_t 
										AND ccc.crudo_uhfapp.lng_c_uhfapp =  ccc.crudo_uhfapp_temp.lng_c_uhfapp_t 
										AND ccc.crudo_uhfapp.n_abonado_c_uhfapp = ccc.crudo_uhfapp_temp.n_abonado_c_uhfapp_t )
					ORDER BY id_c_uhfapp_t ASC;");

		$bd->query("INSERT INTO ccc.crudo_uhfapp_nuevos (	id_c_uhfapp,
															nombre_c_uhfapp,
															mac_c_uhfapp,
															n_abonado_c_uhfapp,
															lat_c_uhfapp,
															lng_c_uhfapp,
															gps_dcml_c_uhfapp,
															gps_sexa_c_uhfapp,
															obs_c_uhfapp,
															fecha_c_uhfapp,
															id_a_uhfapp )	  
					SELECT	cr.id_c_uhfapp,
							cr.nombre_c_uhfapp,
							cr.mac_c_uhfapp,
							cr.n_abonado_c_uhfapp,
							cr.lat_c_uhfapp,
							cr.lng_c_uhfapp,
							cr.gps_dcml_c_uhfapp,
							cr.gps_sexa_c_uhfapp,
							cr.obs_c_uhfapp,
							cr.fecha_c_uhfapp, 
							cr.id_a_uhfapp
					FROM ccc.crudo_uhfapp cr
					JOIN ccc.crudo_uhfapp_temp crt 
					ON cr.lat_c_uhfapp = crt.lat_c_uhfapp_t 
					AND cr.lng_c_uhfapp = crt.lng_c_uhfapp_t
					GROUP BY cr.id_c_uhfapp;");

		$bd->query("DROP TABLE IF EXISTS ccc.crudo_uhfapp_temp;");
		$bd->query("COMMIT;");
		$bd->cerrar_conexion();

		echo "Indexación Existosa";
		echo "<br>";
		echo "<br>";
	}


	/**
	 * 
	**/
	function cargar_datos_tablas() {

		$bd = new BaseDeDatos("ccc");	

		$bd->query("SET autocommit=0");
		$bd->query("START TRANSACTION;");

		/*$bd->query("SET FOREIGN_KEY_CHECKS=0;");
		$bd->query("TRUNCATE `personas`;");
		$bd->query("TRUNCATE `abonados`;");
		$bd->query("TRUNCATE `direcciones_domicilios`;");
		$bd->query("TRUNCATE `coordenadas_gps`;");
		$bd->query("TRUNCATE `instalaciones_servicios`;");
		$bd->query("SET FOREIGN_KEY_CHECKS=1;");*/
	
		$abonados = $bd->fetch_all("SELECT DISTINCT n_abonado_c_uhfapp FROM ccc.crudo_uhfapp_nuevos;");

		//hay n personas
		//que son n abonados
		//y viven en n direcciones 
		for($i=0; $i<count($abonados); $i++) {
			$numero_abonado = $abonados[$i]['n_abonado_c_uhfapp'];

			$control_abonados = $bd->num_rows("	SELECT DISTINCT numero_abonado
												FROM ccc.abonados 
												WHERE numero_abonado = {$numero_abonado} LIMIT 1;");
			
			// $controla si el numero del abonado no existe, para no añadir un numero de abonado existente en la bd  
			if ($control_abonados < 1) {

				$bd->query("INSERT INTO ccc.personas (id_persona) 
							VALUES (NULL);");

				$ultimo_id_persona = $bd->last_id();

				$bd->query("INSERT INTO ccc.abonados (numero_abonado, id_persona) 
							VALUES(	{$numero_abonado}, 
									{$ultimo_id_persona});");

				$bd->query("INSERT INTO ccc.direcciones_domicilios (id_d_domicilio, id_persona)
							VALUES	(NULL,								
									{$ultimo_id_persona});");
			}
		}


		$moviles = $bd->fetch_all("SELECT DISTINCT nombre_c_uhfapp FROM ccc.crudo_uhfapp_nuevos;");

		for($i=0; $i<count($moviles); $i++) {
			$nombre_movil = $moviles[$i]['nombre_c_uhfapp'];

			$control_moviles = $bd->num_rows("SELECT DISTINCT nombre_movil
											FROM ccc.moviles 
											WHERE nombre_movil = '{$nombre_movil}'
											LIMIT 1;");
			
			if ($control_moviles < 1) {
				$bd->query("INSERT IGNORE INTO ccc.moviles (nombre_movil)
							SELECT DISTINCT nombre_c_uhfapp FROM ccc.crudo_uhfapp_nuevos;");
			}
		}


		$nuevos = $bd->fetch_all("SELECT * FROM ccc.crudo_uhfapp_nuevos;");

		for($i=0; $i<count($nuevos); $i++) {
			$numero_abonado = $nuevos[$i]['n_abonado_c_uhfapp'];
			$lat = $nuevos[$i]['lat_c_uhfapp'];
			$lng = $nuevos[$i]['lng_c_uhfapp']; 
			$obs = $nuevos[$i]['obs_c_uhfapp']; 
			$f = new DateTime($nuevos[$i]['fecha_c_uhfapp']);	
			$nombre_movil = $nuevos[$i]['nombre_c_uhfapp'];  	

			$id_domicilio_array = $bd->fetch_array("SELECT DISTINCT dd.id_d_domicilio
													FROM ccc.direcciones_domicilios dd
													INNER JOIN abonados a
													ON dd.id_persona = a.id_persona
													WHERE a.numero_abonado = {$numero_abonado}");

			$id_domicilio = $id_domicilio_array['id_d_domicilio'];

			$bd->query("INSERT INTO ccc.coordenadas_gps (id_c_gps, id_d_domicilio, lat_c_gps, lng_c_gps)
						VALUES(	NULL,
								{$id_domicilio},
								{$lat},
								{$lng});");

			$obs = $bd->escape_string($obs);
			$fecha = $f->getTimestamp();


			$id_moviles_array = $bd->fetch_array("SELECT DISTINCT id_movil
												FROM ccc.moviles 
												WHERE nombre_movil = '{$nombre_movil}'");

			$id_movil = $id_moviles_array['id_movil'];

			$bd->query("INSERT INTO ccc.instalaciones_servicios (id_i_servicios, id_d_domicilio, id_movil, observacion_i_servicios, fecha_i_servicios)
						VALUES(	NULL, 
								{$id_domicilio},
								{$id_movil},
								'{$obs}',
								{$fecha});");	
		}

		$bd->query("DROP TABLE IF EXISTS ccc.crudo_uhfapp_nuevos;");	
		$bd->query("COMMIT;");		
		$bd->cerrar_conexion();
	}


	function cargar_fotos() { 

		$bd = new BaseDeDatos("ccc");	

		$bd->query("SET autocommit=0");
		$bd->query("START TRANSACTION;");

		/*$bd->query("SET FOREIGN_KEY_CHECKS=0;");
		$bd->query("TRUNCATE `fotos_domicilios`;");
		$bd->query("SET FOREIGN_KEY_CHECKS=1;");*/

		$numero_abonados_array = $bd->fetch_all("SELECT numero_abonado FROM ccc.abonados;");	
		
		//echo count($numero_abonados_array);
		//echo "<br>";

		for($i=0; $i<count($numero_abonados_array); $i++) {		

			$numero_abonado = $numero_abonados_array[$i]['numero_abonado'];				

			$id_archivo_array = $bd->fetch_array("SELECT DISTINCT ar.id_a_uhfapp
												FROM ccc.archivos_uhfapp  ar
												INNER JOIN abonados a
												ON CAST(TRIM(TRAILING '.jpg' FROM TRIM(LEADING 'clie_' FROM ar.nombre_a_uhfapp )) AS UNSIGNED) = {$numero_abonado}
												LEFT JOIN ccc.fotos_domicilios f 
												ON ar.id_a_uhfapp = f.id_a_uhfapp
												WHERE f.id_a_uhfapp IS NULL
												AND ar.extension_a_uhfapp = 'jpg';");

			$id_domicilio_array = $bd->fetch_array("SELECT DISTINCT dd.id_d_domicilio
													FROM ccc.direcciones_domicilios dd
													INNER JOIN abonados a
													ON dd.id_persona = a.id_persona
													WHERE a.numero_abonado = {$numero_abonado};");

			$id_archivo = $id_archivo_array['id_a_uhfapp'];
			$id_domicilio = $id_domicilio_array['id_d_domicilio'];			

			if($id_archivo != NULL) {
				if($id_domicilio != NULL) {
					$bd->query("INSERT IGNORE INTO ccc.fotos_domicilios (id_f_domicilio, id_a_uhfapp, numero_abonado, id_d_domicilio)
										VALUES(	NULL,
												{$id_archivo},
												{$numero_abonado},
												{$id_domicilio});");
				}
			}
		}

		$bd->query("COMMIT;");		
		$bd->cerrar_conexion();
	}
	
	function exportar_datos($url) {
		$bd = new BaseDeDatos("ccc");
		$info_mapa = [];

		$hoy=date("Y-m-d");
		//$hoy='2018-09-12 00:00:00';
		$datos = $bd->fetch_all("SELECT n_abonado_c_uhfapp, lat_c_uhfapp, lng_c_uhfapp FROM ccc.crudo_uhfapp WHERE fecha_c_uhfapp = '$hoy'");

		//print_r($datos);

		if($datos == NULL ) {
			$ret = "No se encontraron datos para agregar el día de hoy.";
		}
		else {

			$i=0;
			foreach ($datos as $clave => $dato) {

				$lat = floatval($dato['lat_c_uhfapp']);
				$lng = floatval($dato['lng_c_uhfapp']);
				$numero_abonado = (int) $dato["n_abonado_c_uhfapp"];				

				$info_mapa[$i] =  ["CLIENTE" => $numero_abonado,"LATITUD" => $lat, "LONGITUD" => $lng];

				// $ret = file_get_contents($url.json_encode($info_mapa[1],JSON_PRETTY_PRINT)); //con este no funca
				$ret = file_get_contents($url.json_encode($info_mapa[$i]));

				if($ret != '{"PROCESADO":"UPDATE OK"}') {
		    		throw new Exception("Error al exportar datos.");
		  		} 

		  		echo $url.json_encode($info_mapa[$i]);
		  		echo "<br>";

		  		$i++;
			}

			echo "<br><br><br>";
			echo "Se agregaron {$i} entradas.";
		}

  		return $ret;
	}









































































































































	/**
	 * 	Notas: No se usa actualmente.
	**/
	function cursor() {
		$bd = new BaseDeDatos("ccc");	
		$bd->query("CALL cargar_csv");
		$bd->cerrar_conexion();
	}


	/**
	 *	Descripcion: Indexa los datos dentro de archivo csv. Funciona. No usa tabla temporal.
	 * 	Salida:
	 * 	Notas: No se usa actualmente.
	**/
	function indexar_datos_crudos_csv_2 ($id_archivos, $archivos) {
		$bd = new BaseDeDatos("ccc");	

		$bd->query("SET autocommit=0");
		$bd->query("SET foreign_key_checks=0;");

		for ($i=0; $i<count($archivos); $i++) {
				$extension = pathinfo($archivos[$i], PATHINFO_EXTENSION);				
				if($extension == 'csv') {
					$fecha = str_replace(".csv", "", $archivos[$i]);
					//echo $fecha;
					//echo "<br>";
					
					$fecha = pathinfo($archivos[$i]);
					$fecha = $fecha['filename'];
					$fecha = substr($fecha,-8);
					//echo $fecha;
					//echo "<br>";
					
					$año = substr($fecha,0,4);
					$mes = substr($fecha,4,2);
					$dia = substr($fecha,6,2);

					$fecha = "{$año}-{$mes}-{$dia}";
					//echo $fecha;
					//echo "<br>";		
										
					///////////////
					//simplificar//
					//////////////////////////////////////
					//añadir foreing key de los archivos//
					///////////////////////////////////////
					//prevenir ingresos de lat y long = 0//
					///////////////////////////////////////
					$bd->query("LOAD DATA LOCAL INFILE '$archivos[$i]'
								INTO TABLE ccc.crudo_uhfapp
								FIELDS TERMINATED BY '\",'
								LINES TERMINATED BY '\\n'
									(@nombre, 
									@mac_celular, 
									@numero_abonado, 
									@coord_gps_dcml, 
									@coord_gps_sexa, 
									@observacion)
								SET							 
									nombre_c_uhfapp = SUBSTR(TRIM(@nombre), 2),
									mac_c_uhfapp = SUBSTR(TRIM(@mac_celular), 2),
									n_abonado_c_uhfapp = CAST(SUBSTR(TRIM(@numero_abonado), 2) AS UNSIGNED),

									gps_sexa_c_uhfapp = SUBSTR(TRIM(@coord_gps_sexa), 2),
									lat_c_uhfapp = CAST(SUBSTRING_INDEX(SUBSTR(TRIM(@coord_gps_dcml), 2), ',', 1) AS DECIMAL(10,6)),
									lng_c_uhfapp  = CAST(SUBSTRING_INDEX(SUBSTR(TRIM(@coord_gps_dcml), 2), ',', -1) AS DECIMAL(10,6)),					
									gps_dcml_c_uhfapp  = ST_GeomFromText(CONCAT('POINT(',REPLACE(SUBSTR(TRIM(@coord_gps_dcml), 2), ',',' '),')')),

									obs_c_uhfapp  = SUBSTR(TRIM(@observacion), 2),
									obs_c_uhfapp  = SUBSTRING(obs_c_uhfapp , 1, LENGTH(obs_c_uhfapp)-1),
									obs_c_uhfapp  = REPLACE(obs_c_uhfapp, '\'', '\\''),
									obs_c_uhfapp  = REPLACE(obs_c_uhfapp, '\"', 'º|@#'),
									obs_c_uhfapp  = REPLACE(obs_c_uhfapp, 'º|@#', '\"'),

									fecha_c_uhfapp = '$fecha',
									id_a_uhfapp='$id_archivos[$i]';");	
									
			}
		}		

		//borra las filas con valores de lat o lng igual 0
		$bd->query('DELETE FROM ccc.crudo_uhfapp WHERE lat_c_uhfapp = 0 OR lng_c_uhfapp = 0');

		$bd->query("COMMIT;");
		$bd->query("SET foreign_key_checks=1;");

		$bd->cerrar_conexion();

		echo "<br>";
		echo "<br>";
		echo "Indexación Existosa";
		echo "<br>";
		echo "<br>";
	}

	


	/**
	 * 	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: Agregar logging.
	 */
	function comparar_directorios () {
		$dir = new Directorio();
		$lista_comp = array( );

		$lista_comp['csv'] = $dir->lista_sincronizacion(DIR_ORIGEN,DIR_DESTINO,".csv");
		$lista_comp['jpg'] = $dir->lista_sincronizacion(DIR_ORIGEN,DIR_DESTINO,".jpg");
		$lista_comp['kml'] = $dir->lista_sincronizacion(DIR_ORIGEN,DIR_DESTINO,".kml");
		
		for($i=0; $i<count($lista_comp['csv']); $i++) {
			$lista_comp['csv'][$i] = str_replace ("\#303\#263", "ó", $lista_comp['csv'][$i]);
		}
		for($i=0; $i<count($lista_comp['kml']); $i++) {
			$lista_comp['kml'][$i] = str_replace ("\#303\#263", "ó", $lista_comp['kml'][$i]);
		}

		$lista_comp['completa'] = array_merge($lista_comp['csv'], $lista_comp['jpg']);
		$lista_comp['completa'] = array_merge($lista_comp['completa'],$lista_comp['kml']);

		/*print_r($lista_comp['csv']);
		echo "<br>";
		echo "<br>";
		echo "<br>";*/

		return $lista_comp;
	}


	/**
	 * 	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: Agregar logging.
	**/
	function sincronizar_directorios () {
		$dir = new Directorio();
		$lista_comp = array( );
		$lista_sincro = array( );

		$lista_comp = comparar_directorios();
		$dir->sincronizar(DIR_ORIGEN,DIR_DESTINO);
		$lista_sincro = comparar_directorios();

		if (count($lista_sincro['completa']) < 1) {
			echo "--- DIRECTORIOS SINCRONIZADOS ---";
			echo "<br>";
			echo "<br>";
			echo "<br>";
		}
		else {
				//Logging.
				echo "ERROR AL INTENTAR SICRONIZACIÓN";
				echo "<br>";
				echo "<br>";
				echo "<br>";
				print_r($lista_sincro['completa']);
				echo "<br>";
				echo "<br>";
				echo "<br>";
			}

		return $lista_comp;
	}







	/**
	 *	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar:
	**/
	function indice_archivos_csv ($sincro) {
		$bd = new BaseDeDatos("ccc");		

		$bd->query("TRUNCATE ccc._temp_csv_app_relevamiento;");
		$bd->query("ALTER TABLE ccc._temp_csv_app_relevamiento AUTO_INCREMENT = 1;");
	}



	/**
	 *	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: Agregar logging.
	**/
	function indexar_datos_csv ($sincro) {
		$bd = new BaseDeDatos("ccc");		

		$bd->query("TRUNCATE ccc._temp_csv_app_relevamiento;");
		$bd->query("ALTER TABLE ccc._temp_csv_app_relevamiento AUTO_INCREMENT = 1;");
		$i=0;
		//echo "entra";
		//echo "<br>";
		foreach ($sincro as $path) {
			$fecha = str_replace(".csv", "", $path);
			//echo $fecha;
			//echo "<br>";

			$fecha = substr($fecha,-8);
			//echo $fecha;
			//echo "<br>";

			$año = substr($fecha,0,4);
			$mes = substr($fecha,4,2);
			$dia = substr($fecha,6,2);

			$fecha = "{$año}-{$mes}-{$dia}";
			//echo $fecha;
			//echo "<br>";

			$i++;
			$ruta_orig = DIR_ORIGEN."{$path}";
			$ruta_backup = DIR_DESTINO."/{$path}";			
			
			$bd->query("LOAD DATA LOCAL INFILE '{$ruta_backup}'
							INTO TABLE ccc._temp_csv_app_relevamiento
							FIELDS TERMINATED BY '\",'
							LINES TERMINATED BY '\\n'
							(@nombre_celular, @mac_celular, @numero_abonado, @coord_gps_dcml, @coord_gps_sexa, @observacion) 
							SET nombre_celular = SUBSTR(TRIM(@nombre_celular), 2),
								mac_celular = SUBSTR(TRIM(@mac_celular), 2),
								numero_abonado = CAST(SUBSTR(TRIM(@numero_abonado), 2) AS UNSIGNED),
								
								coord_gps_dcml_str = SUBSTR(TRIM(@coord_gps_dcml), 2),
								coord_gps_sexa_str = SUBSTR(TRIM(@coord_gps_sexa), 2),
								lat = CAST(SUBSTRING_INDEX(coord_gps_dcml_str, ',', 1) AS DECIMAL(10,6)),
								lng = CAST(SUBSTRING_INDEX(coord_gps_dcml_str, ',', -1) AS DECIMAL(10,6)),
								coord_gps_dcml_pnt = ST_GeomFromText(CONCAT('POINT(',REPLACE(coord_gps_dcml_str, ',',' '),')')),

								observacion = SUBSTR(TRIM(@observacion), 2),
								observacion = SUBSTRING(observacion, 1, LENGTH(observacion)-1),
								observacion = REPLACE(observacion, '\'', '\\''),
								observacion = REPLACE(observacion, '\"', 'º|@#'),
								observacion = REPLACE(observacion, 'º|@#', '\"'),


								ruta_archivo_original = '{$ruta_orig }',
								ruta_archivo_backup = '{$ruta_backup}',
								fecha_y_hora_instalacion = '{$fecha}';");
		}

		$bd->query("INSERT INTO ccc.csv_app_relevamiento (nombre_celular,
														  mac_celular,
														  numero_abonado,
														  lat,
														  lng,	
														  coord_gps_dcml_str,
														  coord_gps_dcml_pnt,
														  coord_gps_sexa_str,
														  observacion,
														  ruta_archivo_original,
														  ruta_archivo_backup,
														  fecha_y_hora_instalacion)	  
					SELECT	nombre_celular,
							mac_celular,
							numero_abonado,
							lat,
							lng,	
							coord_gps_dcml_str,
							coord_gps_dcml_pnt,
							coord_gps_sexa_str,
							observacion,
							ruta_archivo_original,
							ruta_archivo_backup,
							fecha_y_hora_instalacion
					FROM ccc._temp_csv_app_relevamiento
					ORDER BY id ASC;");
		

		$bd->query("CALL cargar_csv()");

		$bd->cerrar_conexion();

		echo "<br>";
		echo "<br>";
		echo "Indexación Existosa";
		echo "<br>";
		echo "<br>";
	}


	/**
	 *	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: Agregar logging.
	**/
	function indexar_datos_jpg ($sincro) {
		$bd = new BaseDeDatos("ccc");

		foreach ($sincro as $path) {
			// extraccion numero abonado del nombre
			$borrar = array("jpg/clie_", ".jpg");
			$numero_abonado = str_replace($borrar, "", $path);
			echo "<br>";
			echo $numero_abonado;
			echo "<br>";
			//////
			

			$ruta_orig = DIR_ORIGEN."{$path}";
			$ruta_backup = DIR_DESTINO."/{$path}";

			echo "ruta original: {$ruta_orig}";
			echo "<br>";
			echo "ruta backup: {$ruta_backup}";
			echo "<br>";
			echo "<br>";

			$bd->query("INSERT IGNORE INTO ccc.foto_instalacion (numero_abonado_foto_inst,
																	rut_arch_orig_foto_inst, 
																	rut_arch_bu_foto_inst) 
						  VALUES ($numero_abonado,
								  '{$ruta_orig}',
								  '{$ruta_backup}');");



			/*
			echo "INSERT IGNORE INTO ccc.foto_instalacion (numero_abonado,
														rut_arch_orig_foto_inst, 
														rut_arch_bu_foto_inst) 
			  VALUES ($n_abo,
					  '{$ruta_orig}',
					  '{$ruta_backup}');";
			*/
		}

		$bd->cerrar_conexion();	 
	}


	/**
	 *	Descripcion:
	 * 	Salida:
	 * 	Notas:
	 * 	Actualizar: Agregar logging.
	 */
	function indexar_datos_kml ($sincro) {
		$bd = new BaseDeDatos("ccc");

		foreach ($sincro as $path) {
			$ruta_orig = DIR_ORIGEN."{$path}";
			$ruta_backup = DIR_DESTINO."/{$path}";

			echo $ruta_orig;
			echo "<br>";
			echo "<br>";
			echo "<br>";

			$dom = new DOMDocument;
			$contenido = file_get_contents($ruta_orig);
			$dom->loadXML($contenido);
			
			$placemarks = $dom->getElementsByTagName('Placemark');

			//$long = $numeros_abonados->length;

			//echo $long;
			//echo "<br>";
			//echo "<br>";

			foreach ($placemarks as $placemark) {
				$numeros_abonados= $placemark->getElementsByTagName("name");
				$observaciones = $placemark->getElementsByTagName('description');
				$coordenadas = $placemark->getElementsByTagName('coordinates');

				echo $numeros_abonados->item(0)->nodeValue; 
				echo "<br>";
				echo $observaciones->item(0)->nodeValue; 
				echo "<br>";
				echo $coordenadas->item(0)->nodeValue; 
				echo "<br>";
				echo "<br>";
				echo "<br>";

				$numero_abonado = $numeros_abonados->item(0)->nodeValue; 
				$observacion = $observaciones->item(0)->nodeValue; 
				//$observacion = "xxx";
				$coordenadas = $coordenadas->item(0)->nodeValue;

				$observacion = $bd->escape_string($observacion);
				$bd->query("INSERT INTO ccc.kml_instalacion (numero_abonado_kml_inst,
																observacion_kml_inst,
																coord_gps_dcml_str_kml_inst, 
																rut_arch_orig_kml_inst,
																rut_arch_bu_kml_inst)
							VALUES ($numero_abonado,
									'{$observacion}',
									'{$coordenadas}',
									'{$ruta_orig}',
									'{$ruta_backup}');");
			}
		}

		$bd->cerrar_conexion();
	}




	/*******************************************************************************************************/
	/*******************************************************************************************************/
	/*******************************************************************************************************/
	/*******************************************************************************************************/
	/***************************************** O B S O L E T O *********************************************/ 
	/*******************************************************************************************************/
	/*******************************************************************************************************/
	/*******************************************************************************************************/
	/*******************************************************************************************************/


	/**
	 *
	 */
	function ruta_archivo_destino ($rutaOrigenEnv, $rutaOrigenArchivo) {

		////////////////////////////////////////////
		// Hacer Globales en config
		//Directorios origen
		$dirOrigen = "/home/pablo/uhfappTest";

		//Directorios destino
		$dirDestino = "{$dirOrigen}/procesados";
		///////////////////////////////////////////


		$aux = explode("/",$rutaOrigenArchivo);
		$i = count($aux);

		$z = $i-1;
		$y = $i-2;
		$x = $i-3;
		$rutaFinal = $dirDestino."/$aux[$x]/$aux[$y]/$aux[$z]";

		//echo "Ruta final: ".$rutaFinal;
		//echo "<br>";

		return $rutaFinal;
	}

	/**
	 * 
	 */
	function numero_abonados_foto ($rutaOrigenArchivo) {
		//echo $rutaOrigenArchivo;
		//echo "<br>";

		$protoNumAb = explode("_", $rutaOrigenArchivo);
		//echo $protoNumAb[1];
		//echo "<br>";

		$numAb = explode(".", $protoNumAb[1]);
		//echo $numAb[0];
		//echo "<br>";

		return $numAb[0];
	}

	/**
	 *	Compruebo que se hayan copiado todos los archivos
	 */
	function comprobar_copia_y_borrar_original ($ruta_original, $ruta_destino, $tabla) {
		$bd = new BaseDeDatos("app_mapa_abonados");
		$dir = new Directorio();
		$archivosSinCopiar = array();

		$orinalesArchivos = $bd->columna_a_array($ruta_original, $tabla);
		$copiasArchivos = $bd->columna_a_array($ruta_destino,$tabla);
		for($i=0; $i<count($copiasArchivos); $i++) {
			if(file_exists ( $copiasArchivos[$i] )) {
				//echo $copiasArchivos[$i] . " existe!";
				//echo "<br>";
				//Eliminar original
				$dir->borrar($orinalesArchivos[$i]);
			}
			else {
				//echo $copiasArchivos[$i] . " NO EXISTE!!";
				//echo "<br>";
				$archivosSinCopiar[] = $copiasArchivos[$i];
			}
		}

		return $archivosSinCopiar;
	}


	/**
	 *	De los KML solo guardo el numero de usaurio, el resto puedo ser reconstruido.
	 */
	function kml_a_mysql($ruta_original, $ruta_destino) {
		libxml_use_internal_errors(true);
		$bd = new BaseDeDatos("app_mapa_abonados");
		$contents = file_get_contents($ruta_original);
		$xml = simplexml_load_string($contents);

		for($i=0; $i<count($xml);$i++) {
			//echo "Nombre: {$xml->Placemark[$i]->name}";
			//echo "<br>";
			$numbAb = (int)$xml->Placemark[$i]->name;
			//echo "Obversaciones: {$xml->Placemark[$i]->description}";
			//echo "<br>";
			//echo "Coordenadas: 	{$xml->Placemark[$i]->Point->coordinates}";
			//echo "<br>";
			//echo "<br>";
			//$numbAb = numero_abonado_kml($rutaArchivoOrigen[$i]);
			$bd->query("INSERT INTO app_mapa_abonados._temp_kml (numero_abonado, ruta_original_archivo_kml,ruta_destino_archivo_kml) 
					VALUES ('{$numbAb}','{$ruta_original}','{$ruta_destino}')");
		}
	}


	/**
	 *	
	 */
	function inicio_app_mapa_abonados() {

		////////////////////////////////////////////
		// Hacer Globales en config
		//Directorios origen
		$dirOrigen = "/home/pablo/uhfappTest";
		$dirOrigenCSV = "{$dirOrigen}/csv";
		$dirOrigenFoto = "{$dirOrigen}/jpg";
		$dirOrigenKML = "{$dirOrigen}/kml";

		//Directorios destino
		$dirDestino = "{$dirOrigen}/procesados";
		$dirDestinoCSV = "{$dirDestino}/csv";
		$dirDestinoFoto = "{$dirDestino}/jpg";
		$dirDestinoKML = "{$dirDestino}/kml";
		///////////////////////////////////////////

		$dir = new Directorio();
		$bd = new BaseDeDatos("app_mapa_abonados");


		//Vuelco info en Backup
		/*$dir->copiar($dirOrigenCSV, "{$dirOrigen}/BU/csv");
		$dir->copiar($dirOrigenFoto, "{$dirOrigen}/BU/jpg");
		$dir->copiar($dirOrigenKML, "{$dirOrigen}/BU/kml");*/

		/**
		 *	Las 3 bases de datos temporales, _temp_csv, _temp_kml, _temp_foto, obtienen todos sus datos de forma independiente.
		 */
		$rutaArchivoOrigen = $dir->leer_solo_no_directorios($dirOrigenCSV);
		for($i=0; $i<count($rutaArchivoOrigen); $i++) {

			$rutaArchivoDestino = ruta_archivo_destino($dirOrigenCSV , $rutaArchivoOrigen[$i]);

			//echo $rutaArchivoDestino;
			//echo "<br>";

			$bd->query("LOAD DATA LOCAL INFILE '{$rutaArchivoOrigen[$i]}'
						INTO TABLE app_mapa_abonados._temp_csv FIELDS TERMINATED BY '\",'
						LINES TERMINATED BY '\\n'
						(@v_id_celular, @v_mac_celular, @v_numero_abonado, @v_punto_gps_string, @v_punto_gps2, @v_observacion_instalacion)
						SET id_celular = SUBSTR(TRIM(@v_id_celular), 2),
							mac_celular = SUBSTR(TRIM(@v_mac_celular), 2),
							numero_abonado = CAST(SUBSTR(TRIM(@v_numero_abonado), 2) AS UNSIGNED),
							punto_gps_string = SUBSTR(TRIM(@v_punto_gps_string), 2),
							punto_gps2 = SUBSTR(TRIM(@v_punto_gps2), 2),
							observacion_instalacion = SUBSTR(TRIM(@v_observacion_instalacion), 2),
							observacion_instalacion = SUBSTRING(observacion_instalacion, 1, LENGTH(observacion_instalacion)-1),
							ruta_original_archivo_csv = '{$rutaArchivoOrigen[$i]}',
							ruta_destino_archivo_csv = '{$rutaArchivoDestino}'");
		}

		// No realizar este filtro.
		// Pueden haber datos de abonados que no tengan gps pero si otros datos.
		//$bd->query("DELETE FROM app_mapa_abonados._temp_csv WHERE punto_gps_string = '0.0,0.0' OR punto_gps_string IS NULL");

		$rutaArchivoOrigen = $dir->leer_solo_no_directorios($dirOrigenKML);
		for($i=0; $i<count($rutaArchivoOrigen); $i++) {
			$rutaArchivoDestino = ruta_archivo_destino($dirOrigenCSV , $rutaArchivoOrigen[$i]);
			kml_a_mysql($rutaArchivoOrigen[$i], $rutaArchivoDestino);
		}

		$rutaArchivoOrigen = $dir->leer_solo_no_directorios($dirOrigenFoto);
		for($i=0; $i<count($rutaArchivoOrigen); $i++) {
			$rutaArchivoDestino = ruta_archivo_destino($dirOrigenCSV , $rutaArchivoOrigen[$i]);
			$numAb = numero_abonados_foto($rutaArchivoOrigen[$i]);
			$bd->query("INSERT INTO app_mapa_abonados._temp_foto (numero_abonado, ruta_original_archivo_foto, ruta_destino_archivo_foto) 
						VALUES ({$numAb},'{$rutaArchivoOrigen[$i]}', '{$rutaArchivoDestino}')");
		}

		//print_r($dir->leer_solo_no_directorios($dirOrigenFoto));
		//print_r($dir->lista_interativa($dirOrigenFoto));

		//Falta control
		//Si no hubo errores, continua esto:

		//Creo los directorios destino
		$dir->crear($dirDestino);
		$dir->crear($dirDestinoCSV);
		$dir->crear($dirDestinoFoto);
		$dir->crear($dirDestinoKML);

		//Le otoro los permisos necesarios
		$dir->permisos($dirDestino,0777);

		// Copiar los contenidos el el destino
		$dir->copiar($dirOrigenCSV,$dirDestinoCSV);
		$dir->copiar($dirOrigenFoto,$dirDestinoFoto);
		$dir->copiar($dirOrigenKML,$dirDestinoKML);

		$dir->permisos($dirDestino,0777);

		$comprobar = comprobar_copia_y_borrar_original ("ruta_original_archivo_csv", "ruta_destino_archivo_csv","_temp_csv");

		//Si la long de comprobar es meno a 1, entonces los datos fueron copiados correctamente.
		if(count($comprobar) < 1) {
			//realizar el volcado de datos en las bases de datos principales
			//echo "Todo Bien!";

			$dir->borrar($dirOrigenCSV);
			$dir->borrar($dirOrigenFoto);
			$dir->borrar($dirOrigenKML);

			//Abonados
			//Primero inserto todos los numeros de abonados encontrados (de forma independiente) en todos los archivos
			$bd->query("INSERT IGNORE INTO app_mapa_abonados.abonados (numero_abonado) 
						SELECT DISTINCT app_mapa_abonados._temp_csv.numero_abonado 
						FROM app_mapa_abonados._temp_csv");

			$bd->query("INSERT IGNORE INTO app_mapa_abonados.abonados (numero_abonado) 
						SELECT DISTINCT app_mapa_abonados._temp_kml.numero_abonado 
						FROM app_mapa_abonados._temp_kml");

			$bd->query("INSERT IGNORE INTO app_mapa_abonados.abonados (numero_abonado) 
						SELECT DISTINCT app_mapa_abonados._temp_foto.numero_abonado 
						FROM app_mapa_abonados._temp_foto");

			//Actualizo las categorias.
			$bd->query("UPDATE app_mapa_abonados.abonados
						JOIN app_mapa_abonados._temp_csv 
						ON app_mapa_abonados.abonados.numero_abonado = app_mapa_abonados._temp_csv.numero_abonado 
						SET app_mapa_abonados.abonados.punto_gps_string = app_mapa_abonados._temp_csv.punto_gps_string, 
							app_mapa_abonados.abonados.punto_gps2 = app_mapa_abonados._temp_csv.punto_gps2");
			////

			//instalacion
			//Inserto los datos
			$bd->query("INSERT INTO app_mapa_abonados.instalacion (numero_abonado, id_celular, mac_celular, observacion_instalacion, ruta_archivo_csv)
						SELECT _temp_csv.numero_abonado, _temp_csv.id_celular, _temp_csv.mac_celular, _temp_csv.observacion_instalacion, _temp_csv.ruta_destino_archivo_csv 
						FROM app_mapa_abonados._temp_csv");

			//Actualizo los datos de _temp.kml
			$bd->query("UPDATE app_mapa_abonados.instalacion 
						JOIN app_mapa_abonados._temp_kml 
						ON app_mapa_abonados.instalacion.numero_abonado = app_mapa_abonados._temp_kml.numero_abonado 
						SET app_mapa_abonados.instalacion.ruta_archivo_kml = app_mapa_abonados._temp_kml.ruta_destino_archivo_kml");

			//Actualizo la referencia a abonados
			$bd->query("UPDATE app_mapa_abonados.instalacion 
						JOIN app_mapa_abonados.abonados 
						ON app_mapa_abonados.instalacion.numero_abonado = app_mapa_abonados.abonados.numero_abonado 
						SET app_mapa_abonados.instalacion.id_ref_abonados = app_mapa_abonados.abonados.id_mae_abonados 
						WHERE app_mapa_abonados.instalacion.id_ref_abonados is NULL");
			////

			//foto
			//Inserto datos
			$bd->query("INSERT INTO app_mapa_abonados.foto (numero_abonado, ruta_foto)
						SELECT numero_abonado, ruta_destino_archivo_foto
						FROM app_mapa_abonados._temp_foto");

			//Actualizo la referencia a abonados
			$bd->query("UPDATE app_mapa_abonados.foto
						JOIN app_mapa_abonados.abonados 
						ON app_mapa_abonados.foto.numero_abonado = app_mapa_abonados.abonados.numero_abonado 
						SET app_mapa_abonados.foto.id_ref_abonados = app_mapa_abonados.abonados.id_mae_abonados 
						WHERE app_mapa_abonados.foto.id_ref_abonados is NULL");
		}
		else{
			echo "Ocurrio un error al intentar copiar los archivos";
		}

		$bd->query("TRUNCATE _temp_csv");
		$bd->query("TRUNCATE _temp_kml");
		$bd->query("TRUNCATE _temp_foto");
	}

?>